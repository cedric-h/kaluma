const { GPIO } = require("gpio");
const { screen } = require("screen");
const gc = screen.getContext("buffer");
const native = global.require("native");

const setLegend = bitmaps => {
  native.legend_clear();
  for (const [charStr, imgStr] of bitmaps) {
    native.legend_doodle_set(charStr, imgStr.trim());
  }
  native.legend_prepare();
}

function _makeTag(cb) {
  return (strings, ...interps) => {
    if (typeof strings === "string") {
      throw new Error("Tagged template literal must be used like name`text`, instead of name(`text`)");
    }
    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');
    return cb(string);
  }
}
const bitmap = _makeTag(text => text);

(() => {
  const width = 128, height = 160;
  const pixels = new Uint16Array(width * height);
  const { render, setMap, getGrid, legend_doodle_set } = native;
  
  const smallFire = ['0', '1'];
  const   bigFire = ['2', '3'];
  const   allFire = [...smallFire, ...bigFire];
  const       log = 'l';
  const    player = 'p';
  const      cube = 'c';
  const     house = 'h';
  const     grass = 'g';
  
  // for (let i = 0; i < 100; i++) {
    pixels.fill(gc.color16(255, 255, 255));
  setLegend([
  [ smallFire[0], bitmap`
................
................
.....3.3........
....3.....3.....
...3.3.3.3.3....
..3.3.3.3.3.....
...3.333.3...3..
..3.3.3.3...3...
.3.333.3.....3..
..3.333.3.3.3...
.3...3.3.3.3.3..
......3.333.3...
...3.333.3.3....
....3.333.......
.......3........
................
`],
  [ smallFire[1], bitmap`
................
................
........3.3.....
.....3.....3....
....3.3.3.3.3...
.....3.3.3.3.3..
..3...3.333.3...
...3...3.3.3.3..
..3.....3.333.3.
...3.3.3.333.3..
..3.3.3.3.3...3.
...3.333.3......
....3.3.333.3...
.......333.3....
........3.......
................`],
  [ bigFire[0], bitmap`
................
......3.3.......
.3.3.3.3........
..3.3.....3.3...
.3.3.3.3.3.3....
..3.3.3.3.3.....
.3.33333.3...3..
..3.333.3...3.3.
.3.333.3.....3..
3.3.333.3.3.3.3.
.3...333.333.3..
....3.33333.3.3.
...3.33333.3.3..
....3.333.3.3...
.......3........
................`],
  [ bigFire[1], bitmap`
................
.......3.3......
........3.3.3.3.
...3.3.....3.3..
....3.3.3.3.3.3.
.....3.3.3.3.3..
..3...3.33333.3.
.3.3...3.333.3..
..3.....3.333.3.
.3.3.3.3.333.3.3
..3.333.333...3.
.3.3.33333.3....
..3.3.33333.3...
...3.3.333.3....
........3.......
................`],
  [ log, bitmap`
................
................
..........44....
........44..4...
......44.....4..
.....4.......4..
....4........4..
...4.........4..
..4444......4...
.44..44....4....
.4....4...4.....
.4....4..4......
.4....4.4.......
..4...44........
...444..........
................`],
  [ player, bitmap`
................
................
................
......444.......
.....4...4......
.....40.04......
....44...44.....
...4.40004.4....
...4.4...4.4....
......444.......
.....4...4......
.....4...4......
....44...44.....
................
................
................`],
  [ cube, bitmap`
......4444......
....44....44....
..44........44..
.4............4.
4.44........44.4
4...44....44...4
4.4...4444...4.4
4...4...4....4.4
4.4.4.4.4.4..4.4
4.4.4...4......4
4.....4.4.4..4.4
.4..4.4.4.4...4.
..44....4...44..
....44..4.44....
......4444......
................`], 
  [ house, bitmap`
................
................
................
................
........5.......
......55.55.....
....55.....55...
...5.........5..
..5...........5.
....555555555...
.....5.....5....
....5.......5...
...5.........5..
...5.........5..
..5....555....5.
...555.555.555..`],
  [ grass, bitmap`
..4.........4...
...4.........4..
...44........4..
....4.........4.
....44........4.
.....4........4.
.....44......4..
.....44...4.....
.....444...4....
4.....44....4...
.4....44....4...
.4...444.....4..
.4...44......4..
.4...........4..
4...........4...
................`]
  ]);
  setMap(`.........
...g.g...
..gg.gg..
.gg...g..
..1...gl.
......ll.
..lllll..
..hl...p.
.........`);
  console.log(JSON.stringify(getGrid(), null, 2));
    render(pixels, 0);

    screen.fillImage(0, 0, width, height, new Uint8Array(pixels.buffer));
  // }
})();
